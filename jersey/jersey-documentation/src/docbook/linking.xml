<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    http://glassfish.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                 "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"[
<!ENTITY % ents SYSTEM "jersey.ent" >
%ents;
]>
<chapter id="linking">
    <title>Declarative Hyperlinking</title>
    <para><ulink url="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven">RESTful
            APIs must be hypertext-driven</ulink>. JAX-RS currently offers &jaxrs.core.UriBuilder; to simplify URI
        creation but Jersey adds an additional annotation-based alternative that is described
        here.</para>
    <section>
        <title>Links in Representations</title>
        <para>Links are added to representations using the <literal>@Ref</literal> annotation on
            entity class fields. The Jersey runtime is responsible for injecting the appropriate URI
            into the field prior to serialization by a message body writer. E.g. consider the
            following resource and entity classes:</para>
        <programlisting language="java">@Path("widgets")
public class WidgetsResource {
  @GET
  public Widgets get() {
    return new Widgets();
  }
}
        
public class Widgets {
  @Ref(resource=WidgetsResource.class)
  URI u;
}</programlisting>
        <para>After a call to <literal>WidgetsResource#get</literal>, the Jersey runtime will inject
            the value "/context/widgets"<footnote>
                <para>Where <literal>/context</literal> is the application deployment
                    context.</para>
            </footnote> into the returned <literal>Widgets</literal> instance. If an absolute URI is
            desired instead of an absolute path then the annotation can be changed to
                <literal>@Ref(resource=WidgetsResource.class, style=ABSOLUTE)</literal>.</para>
        <para>The above usage works nicely when there's already a URI template on a class that you
            want to reuse. If there's no such template available then you can use a literal value
            instead of a reference. E.g. the following is equivalent to the earlier example:
                <literal>@Ref(value="widgets", style=ABSOLUTE)</literal>.</para>
    </section>
    <section>
        <title>Binding Template Parameters</title>
        <para>Referenced or literal templates may contain parameters. Two forms of parameters are
            supported:</para>
        <itemizedlist>
            <listitem>
                <para>URI template parameters, e.g. <literal>widgets/{id}</literal> where
                        <literal>{id}</literal> represents a variable part of the URI.</para>
            </listitem>
            <listitem>
                <para>EL expressions, e.g. <literal>widgets/${instance.id}</literal> where
                        <literal>${instance.id}</literal> is an EL expression.</para>
            </listitem>
        </itemizedlist>
        <para>Parameter values can be extracted from three implicit beans:</para>
        <variablelist>
            <varlistentry>
                <term>
                    <literal>instance</literal>
                </term>
                <listitem>
                    <para>Represents the instance of the class that contains the annotated
                        field.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <literal>entity</literal>
                </term>
                <listitem>
                    <para>Represents the entity class instance returned by the resource
                        method.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <literal>resource</literal>
                </term>
                <listitem>
                    <para>Represents the resource class instance that returned the entity.</para>
                </listitem>
            </varlistentry>
        </variablelist>

        <para>By default URI template parameter values are extracted from the implicit
                <literal>instance</literal> bean, i.e. the following two annotations are
            equivalent:</para>
        <programlisting language="java">@Ref("widgets/{id}")
@Ref("widgets/${instance.id}")</programlisting>
        <para>The source for URI template parameter values can be changed using the
                <literal>@Binding</literal> annotation, E.g. the following two annotations are
            equivalent:</para>
        <programlisting language="java">@Ref(value="widgets/{id}", bindings={
  @Binding(name="id" value="${resource.id}"}
)
@Ref("widgets/${resource.id}")</programlisting>

    </section>

    <section>
        <title>Conditional Link Injection</title>
        <para>Link value injection can be made conditional by use of the
                <literal>condition</literal> property. The value of this property is a boolean EL
            expression and a link will only be injected if the condition expression evaluates to
            true. E.g.:</para>
        <programlisting language="java">@Ref(value="widgets/${instance.id}/offers",
  condition="${instance.offers}")
URI offers;</programlisting>
        <para>In the above, a URI will only be injected into the <literal>offers</literal> field if
            the <literal>offers</literal> property of the instance is <literal>true</literal>.
        </para>
    </section>


    <section>
        <title>Link Headers</title>
        <para><ulink url="http://tools.ietf.org/html/rfc5988#section-5">HTTP Link
                headers</ulink> can also be added to responses using annotations. Instead of
            annotating the fields of an entity class with <literal>@Ref</literal>, you instead
            annotate the entity class itself with <literal>@Link</literal>. E.g.:</para>
        <programlisting language="java">@Link(
  value=@Ref("widgets/${resource.nextId}"),
  rel="next"
)</programlisting>
        <para>The above would insert a HTTP Link header into any response whose entity was thus
            annotated. The <literal>@Link</literal> annotation contains properties that map to the
            parameters of the HTTP Link header. The above specifies the link relation as
                <literal>next</literal>. All properties of the <literal>@Ref</literal> annotation
            may be used as described above. </para>
        <para>Multiple link headers can be added by use of the <literal>@Links</literal> annotation
            which can contain multiple <literal>@Link</literal> annotations.</para>
    </section>
    
    <section>
        <title>Configuration</title>
        <para>Declarative hyperlinking support is provided in the form of a filter. First, the application
            must declare a dependency on the <literal>jersey-server-linking</literal> module:</para>
        <programlisting language="xml">&lt;dependency&gt;
  &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
  &lt;artifactId&gt;jersey-server-linking&lt;/artifactId&gt;
  &lt;version&gt;${jersey-version}&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
        <para>Second the filter needs to be installed in the application either programmatically by
            adding:</para>
        <programlisting>com.sun.jersey.server.linking.LinkFilter</programlisting>
        <para>to the list defined by:</para>
        <programlisting>com.sun.jersey.spi.container.ContainerResponseFilters</programlisting>
        <para>or using a <literal>web.xml</literal> init parameter:</para>
        <programlisting language="xml">&lt;init-param&gt;
  &lt;param-name&gt;com.sun.jersey.spi.container.ContainerResponseFilters&lt;/param-name&gt;
  &lt;param-value&gt;com.sun.jersey.server.linking.LinkFilter&lt;/param-value&gt;
&lt;/init-param&gt;
</programlisting>
<para>See the <ulink url="https://maven.java.net/content/repositories/&repository;/com/sun/jersey/samples/jersey-server-linking-sample">jersey-server-linking-sample</ulink> for more details.</para>
    </section>


</chapter>
