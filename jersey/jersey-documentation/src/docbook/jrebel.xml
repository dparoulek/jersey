<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    http://glassfish.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % ents SYSTEM "jersey.ent">
%ents;
]>
<chapter id="jrebel">
    <title>JRebel support</title>

    <para>Jersey provides basic support for JRebel. JRebel can be used to reload java
        classes at runtime without requiring to redeploy an application. This
        can improve developer productivity.
        Java source can be modified, recompiled, and JRebel will ensure changes
        will be reflected at runtime.</para>

    <para>JRebel isn't opensource and is not for free BUT Zeroturnaround (JRebel's author)
        provides a free license for open source project developers. More details can be found
        on the project website: <ulink url="http://www.zeroturnaround.com/jrebel/">http://zeroturnaround.com/jrebel</ulink>.
        Jersey currently supports JRebel version 3.1.2.</para>

    <section>
        <title id="jrebel.use">How to use JRebel with Jersey</title>

        <para>The jersey-jrebel dependency is required in the pom file:</para>

            <programlisting language="xml">        &lt;dependency&gt;
            &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
            &lt;artifactId&gt;jersey-jrebel&lt;/artifactId&gt;
            &lt;version&gt;&version;&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>

        <para>The javarebel-maven-plugin plugin can be added to the pom to automatically configure
        JRebel for the case when java is executed from maven:</para>

            <programlisting language="xml">            &lt;plugin&gt;
                &lt;groupId&gt;org.zeroturnaround&lt;/groupId&gt;
                &lt;artifactId&gt;javarebel-maven-plugin&lt;/artifactId&gt;

                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;generate-rebel-xml&lt;/id&gt;
                        &lt;phase&gt;process-resources&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;generate&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;</programlisting>
    </section>

    <section>
        <title id="jrebel.sample">Using JRebel with the hello world sample</title>

        <para>The following assumes that JRebel has been set up correctly (a JRebel informational message will
            be output if JRebel is enabled).</para>

        <para>
            Download the <ulink url="https://maven.java.net/service/local/artifact/maven/redirect?r=&repository;&amp;g=com.sun.jersey.samples&amp;a=helloworld&amp;v=&version;&amp;c=project&amp;e=zip">hello world sample</ulink>
      and modify the pom file in accordance with the prevous chapter.</para>

        <para>
            Compile Helloworld sample with <code>mvn clean install</code> and run it with <code>mvn exec:java</code>.
            The Helloworld application is deployed on Grizzly container.</para>

        <para>Use a browser and goto the following URL <ulink uri="http://localhost:9998/helloworld">http://localhost:9998/helloworld</ulink>.
            Messages should be output indicating initialization of Jersey framework, and the browser should
            display <code>Hello World</code>.</para>

        <para>Modify the <code>HelloWorldResource.java</code> file such that the resource method <code>getClichedMessage</code>
            returns a different String value. Run <code>mvn compile</code>. Reload the browser window and
            the browser should display the modified message.</para>
    </section>

    <section>
        <title id="jrebel.limitations">Limitations</title>
        <para>JRebel currently doesn't notify it's plugin about newly created classes
        that have no reference to existing classes, such as newly created resource or provder classes.
        However, its possible to detect a newly created resource class and use it in your
        application when you are doing some other changes to existing code.
        Why? After a change has beed made, Jersey re-initializes itself and the
        new class can be detected in the process. For this case you you have to
        use class or package scanning for detecting such resource classes.</para>
    </section>

</chapter>
